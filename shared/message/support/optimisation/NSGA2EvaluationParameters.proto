/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */

syntax = "proto3";

package message.support.optimisation;


message Foot {
    message PutDown {
        // Let the foot's downward trajectory end above the ground
        // this is helpful if the support leg bends
        // (in m, >= 0)
        float z_offset = 1;
        // Phase time for moving the foot from Z offset to ground
        // (in half cycle ratio [0:1])
        float phase = 2;
        // Roll offset on flying foot at put down
        // (in rad, [-1,1])
        float roll_offset = 3;
    }

    message OverShoot {
        // Foot X/Y overshoot in ratio of step length
        // (ratio, >= 0)
        float ratio = 1;
        // Foot X/Y overshoot phase
        // (single support cycle phase, [footApexPhase:1]
        float phase = 2;
    }

    // Lateral distance between the feet center
    // (in m, >= 0)
    float distance = 1;
    // Maximum flying foot height
    // (in m, >= 0)
    float rise = 2;
    // Pause of Z movement on highest point
    // (single support cycle ratio, [0,1])
    float z_pause = 3;
    // Phase of flying foot apex
    // (single support cycle phase, [0:1])
    float apex_phase = 4;

    PutDown   put_down  = 5;
    OverShoot overshoot = 6;
}

message Trunk {
    message PCoefficient {
        // Trunk forward/pitch offset proportional to forward step
        float forward = 1;
        // Trunk forward/pitch offset proportional to rotation step
        float turn = 2;
    }

    // Height of the trunk from ground
    // (in m, > 0)
    float height = 1;
    // Trunk pitch orientation
    // (in rad)
    float pitch = 2;
    // Phase offset of trunk oscillation
    // (half cycle phase, [-1:1])
    float phase = 3;
    // Trunk forward offset
    // (in m)
    float x_offset = 4;
    // Trunk lateral offset
    // (in m)
    float y_offset = 5;
    // Trunk lateral oscillation amplitude ratio
    // (ratio, >= 0)
    float swing = 6;
    // Trunk swing pause length in phase at apex
    // (half cycle ratio, [0:1])
    float pause = 7;
    // Trunk forward offset proportional to forward/rotation step
    // (in 1 and m/rad)
    PCoefficient x_offset_p_coef = 8;
    // Trunk pitch offset proportional to forward/rotation step
    // (in 1 and m/rad)
    PCoefficient pitch_p_coef = 9;
}

message Kick {
    // Length of kick movement
    // (in m, [0:1])
    float length = 1;
    // Time of kick apex
    // (ratio of single support phase, [0:1])
    float phase = 2;
    // Kick velocity
    // (in m/s, > 0)
    float vel = 3;
}

message Pause {
    // Time that the walking is paused when becoming unstable
    // (in s, [0:10])
    float duration = 1;
}

message MaxStep {
    // Maximal step length in X
    // (in m, [0:1])
    float x = 1;
    // Maximal step length in Y
    // (in m, [0:1])
    float y = 2;
    // Maximal step turn in yaw
    // (in rad, [0:1.5])
    float z = 3;
    // Maximal step length in X and Y combined
    // (in m, [0:1])
    float xy = 4;
}

message IMU {
    message Threshold {
        // Threshold for stopping for the robot pitch/roll
        // (in rad, [0:1])
        float threshold = 1;
    }
    // Activates the IMU to stop the walking when the robot gets unstable
    bool active = 1;
    // Threshold for stopping for the robot pitch
    // (in rad, [0:1])
    Threshold pitch = 2;
    // Threshold for stopping for the robot roll
    // (in rad, [0:1])
    Threshold roll = 3;
}

message Gains {
    float legs = 1;
}

message NSGA2EvaluationParameters {
    // Full walk cycle frequency
    // (in Hz, > 0)
    float freq = 1;
    // Length of double support phase in half cycle
    // (ratio, [0:1])
    float double_support_ratio = 2;
    // Give extra swing to first step for better start
    // (in ?, [0:10])
    float first_step_swing_factor = 3;

    Foot    foot     = 4;
    Trunk   trunk    = 5;
    Kick    kick     = 6;
    Pause   pause    = 7;
    MaxStep max_step = 8;
    IMU     imu      = 9;
    Gains   gains    = 10;
    float   velocity = 11;
}
