/*
 * This file is part of the NUbots Codebase.
 *
 * The NUbots Codebase is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The NUbots Codebase is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the NUbots Codebase.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2013 NUbots <nubots@nubots.net>
 */

#include <Eigen/Core>
#include <array>
#include <catch.hpp>
#include <cfloat>
#include <cmath>
#include <iomanip>
#include <utility>

#include "utility/math/coordinates.h"
//#include "utility/math/quaternion.h"

static constexpr double ERROR_THRESHOLD = 1e-6;
// static constexpr double DBL_LWR_INVLD_EDGE = -1e-8;
// static constexpr double DBL_LWR_VALID_EDGE = 1e-8;


// vec3 cartesian test coords
// NOTE: Test values won't exceed 1.8447e+19 (18447000000000000000), anything higher causes inf return values
// See coordinates.h comments for details.
static const std::array<Eigen::Vector3d, 200> cart_coords = {
    // NOTE: Get rid of min and max double vals - causing inf return values.
    // Add comments in the method being tested to explain.
    Eigen::Vector3d(-0.492109181440401e+19, -0.080404385128274e+19, -1.673196359027018e+19),
    Eigen::Vector3d(1.787029403214489e+19, 1.018729997593175e+19, -1.615238543127342e+19),
    Eigen::Vector3d(-0.810874785434450e+19, -0.100240933146911e+19, 1.067010051085060e+19),
    Eigen::Vector3d(-1.005332284670871e+19, -0.667531540161000e+19, 1.016566689960759e+19),
    Eigen::Vector3d(-1.343245172375928e+19, -0.416133487781607e+19, 1.798154024572430e+19),
    Eigen::Vector3d(1.482006730019626e+19, 0.761221601009611e+19, 1.642330824580079e+19),
    Eigen::Vector3d(-0.255005240162815e+19, 1.466251758239093e+19, 0.859206921350226e+19),
    Eigen::Vector3d(0.225423903248460e+19, 0.941182736899421e+19, 1.689391843868278e+19),
    Eigen::Vector3d(-1.791599050007314e+19, -1.344183756232035e+19, -1.365871797740950e+19),
    Eigen::Vector3d(-0.083205976100011e+19, -1.411588882599500e+19, 0.620844816490709e+19),
    Eigen::Vector3d(1.232416949953648e+19, -1.492765538209464e+19, -0.442389812719336e+19),
    Eigen::Vector3d(-1.631235466823056e+19, -0.839410759373803e+19, 0.144015648980596e+19),
    Eigen::Vector3d(-0.662390776487192e+19, -1.660447682117042e+19, 1.613364171569741e+19),
    Eigen::Vector3d(-0.421279425592929e+19, -1.234866419711952e+19, 1.453437282949912e+19),
    Eigen::Vector3d(0.836697876573059e+19, 1.731417699917334e+19, -1.015575389160481e+19),
    Eigen::Vector3d(1.723886664750833e+19, -1.189344292649123e+19, -1.521384442555776e+19),
    Eigen::Vector3d(1.734892824626675e+19, -0.144622970168222e+19, -1.049818920716934e+19),
    Eigen::Vector3d(0.466691897130023e+19, 0.824078422232708e+19, 0.667143756256116e+19),
    Eigen::Vector3d(1.297156883373933e+19, -0.029981293442415e+19, -0.248223079989137e+19),
    Eigen::Vector3d(-0.779292111764823e+19, 0.226947149346207e+19, -0.054302554615261e+19),
    Eigen::Vector3d(-0.452283175021292e+19, 0.942445917219113e+19, 0.813014162128897e+19),
    Eigen::Vector3d(-0.994900308370830e+19, 1.726967663869256e+19, -0.673923812182399e+19),
    Eigen::Vector3d(1.785141428465126e+19, -0.401507085934080e+19, 1.241318388429262e+19),
    Eigen::Vector3d(-1.817844366760795e+19, 0.560037852262998e+19, 1.178789884878523e+19),
    Eigen::Vector3d(0.713693314327846e+19, -1.653277692475848e+19, -0.726385830339650e+19),
    Eigen::Vector3d(-0.445566734212343e+19, 1.449965048315657e+19, 1.158640689678778e+19),
    Eigen::Vector3d(0.789141829651903e+19, 1.432644471552484e+19, -1.748109375189284e+19),
    Eigen::Vector3d(-1.373580664823577e+19, 1.815615457998147e+19, 1.244632566443966e+19),
    Eigen::Vector3d(-1.558545083676729e+19, -0.428641934613475e+19, -0.039564210433344e+19),
    Eigen::Vector3d(0.251706217944309e+19, -0.578338539551195e+19, -1.465885018955728e+19),
    Eigen::Vector3d(1.458243511378774e+19, 0.768016002933251e+19, 0.291045197508921e+19),
    Eigen::Vector3d(0.409327794248950e+19, 0.423758699844683e+19, -1.284428474299505e+19),
    Eigen::Vector3d(1.129409389932535e+19, 1.291403361809952e+19, 1.547903635464914e+19),
    Eigen::Vector3d(-1.719214375061488e+19, 1.634696472661540e+19, 0.837377446710669e+19),
    Eigen::Vector3d(0.437320693506253e+19, 1.786131197497512e+19, -1.306900677712419e+19),
    Eigen::Vector3d(-0.511435203232591e+19, 1.485390191495768e+19, -1.078168782711780e+19),
    Eigen::Vector3d(-1.326460347231515e+19, -1.728806995742819e+19, -0.029268359970124e+19),
    Eigen::Vector3d(-1.371070073063720e+19, -1.524361456348140e+19, -0.767565305361308e+19),
    Eigen::Vector3d(-1.711831989147896e+19, -0.515267225635008e+19, 0.599933300200633e+19),
    Eigen::Vector3d(-0.362056109321649e+19, -1.440257273077529e+19, -1.469201677197931e+19),
    Eigen::Vector3d(1.745893687402958e+19, -0.371048831520298e+19, 0.995724746407408e+19),
    Eigen::Vector3d(1.439260868563142e+19, 0.877582842140069e+19, -0.757839392704887e+19),
    Eigen::Vector3d(0.368823164349282e+19, 1.376948415289122e+19, -1.249617426753380e+19),
    Eigen::Vector3d(-0.379096305017815e+19, -0.642092701084037e+19, -0.898641630030347e+19),
    Eigen::Vector3d(-1.775522813679482e+19, 1.491174277405446e+19, 1.736270154703275e+19),
    Eigen::Vector3d(1.004351848119754e+19, 0.547181112425249e+19, -1.091671254836767e+19),
    Eigen::Vector3d(0.718298935030016e+19, -0.304604567550932e+19, 1.495253412296452e+19),
    Eigen::Vector3d(-1.696594741169099e+19, 1.216091666644187e+19, -1.249494969075879e+19),
    Eigen::Vector3d(0.863944551847523e+19, 1.805904799962889e+19, -0.105884751280827e+19),
    Eigen::Vector3d(1.148665090097979e+19, -0.446422417944790e+19, 1.613480729526894e+19),
    Eigen::Vector3d(-1.605707632843169e+19, -0.053882284059964e+19, -1.343867701756478e+19),
    Eigen::Vector3d(-0.049408666226456e+19, 0.430774458741638e+19, 1.052365409097347e+19),
    Eigen::Vector3d(1.820932282964601e+19, -0.339664037596273e+19, 0.605724766064230e+19),
    Eigen::Vector3d(-0.406956221462169e+19, 0.459289743140767e+19, 0.852874338889250e+19),
    Eigen::Vector3d(0.744230999857037e+19, 0.394480059320709e+19, -1.196199828974156e+19),
    Eigen::Vector3d(-1.052274629710184e+19, 1.126286583930391e+19, -0.485211858286024e+19),
    Eigen::Vector3d(-0.002035095574574e+19, 0.335173618220332e+19, 0.768202803143471e+19),
    Eigen::Vector3d(-1.639456873899396e+19, -0.838041891147508e+19, -0.320230530302655e+19),
    Eigen::Vector3d(-1.713769458718968e+19, -0.130763590422462e+19, -0.938367986942485e+19),
    Eigen::Vector3d(-0.039458642607996e+19, -0.249268761419177e+19, 1.410194819133516e+19),
    Eigen::Vector3d(-0.756904199962857e+19, -0.519343531288477e+19, 0.718572364839373e+19),
    Eigen::Vector3d(-1.605560742572134e+19, 1.518330293734629e+19, 0.664365868413453e+19),
    Eigen::Vector3d(0.738525639131777e+19, -0.564666393326076e+19, -1.730412174201037e+19),
    Eigen::Vector3d(-0.680255583855213e+19, 0.140339875909407e+19, 0.541254743445970e+19),
    Eigen::Vector3d(1.043870518513497e+19, -1.085481628688105e+19, -1.637107244031597e+19),
    Eigen::Vector3d(-1.177873546475141e+19, -0.007256472220271e+19, 0.877737383962196e+19),
    Eigen::Vector3d(-1.754815742851300e+19, -1.241745020653906e+19, 1.787556322098229e+19),
    Eigen::Vector3d(1.019886966493410e+19, 0.082068839797486e+19, 0.747580990768486e+19),
    Eigen::Vector3d(-0.321267464969049e+19, 0.791792124522702e+19, 0.903678202166851e+19),
    Eigen::Vector3d(-0.071492487665266e+19, -0.747926358169337e+19, 0.293035385236383e+19),
    Eigen::Vector3d(-0.934081694032494e+19, 0.341380790724289e+19, 1.656290972756730e+19),
    Eigen::Vector3d(-0.469257967375004e+19, 1.269356698221282e+19, -1.494569733113208e+19),
    Eigen::Vector3d(1.256303053099804e+19, 1.481581397787677e+19, 1.531379776556427e+19),
    Eigen::Vector3d(1.403558584353189e+19, 1.031886611378455e+19, -0.037127604952653e+19),
    Eigen::Vector3d(-0.951515296595206e+19, -1.037976478705562e+19, -0.615574866745227e+19),
    Eigen::Vector3d(0.726159942481798e+19, 0.492288529625990e+19, 1.322057841998719e+19),
    Eigen::Vector3d(-0.854282053010261e+19, 0.784617103410599e+19, -1.747778774441112e+19),
    Eigen::Vector3d(-0.218440288267623e+19, -1.832644791665501e+19, -1.052293055837648e+19),
    Eigen::Vector3d(-1.489593003286025e+19, 0.382140330422883e+19, -0.056398256598997e+19),
    Eigen::Vector3d(-0.741193260638401e+19, 1.631324932749876e+19, 1.471193372513573e+19),
    Eigen::Vector3d(1.711984760116729e+19, -1.523342067295560e+19, 0.823807798010336e+19),
    Eigen::Vector3d(-0.307369051627149e+19, -1.012526055223570e+19, 1.363675627648073e+19),
    Eigen::Vector3d(1.557592094646538e+19, 1.555519304347048e+19, -0.343212949744992e+19),
    Eigen::Vector3d(0.466840425435687e+19, -1.103920209196774e+19, -1.494835246588755e+19),
    Eigen::Vector3d(0.746602792015144e+19, -0.725089014357664e+19, -1.736095260296436e+19),
    Eigen::Vector3d(0.201256690445666e+19, 0.661478621421772e+19, 0.051910393809149e+19),
    Eigen::Vector3d(-0.436437718484998e+19, -1.050941371689539e+19, 0.002472926894150e+19),
    Eigen::Vector3d(-0.170557558232032e+19, -0.155675322675137e+19, 1.060326212433519e+19),
    Eigen::Vector3d(1.502715553420123e+19, 0.062798652102468e+19, 1.167288335983991e+19),
    Eigen::Vector3d(0.660240164545754e+19, -0.272009124389908e+19, 0.849547703534791e+19),
    Eigen::Vector3d(-1.411941334048864e+19, -0.034928858870947e+19, 0.999874866755962e+19),
    Eigen::Vector3d(-0.479885833092861e+19, -1.152745037978666e+19, -0.617642974263262e+19),
    Eigen::Vector3d(1.282622624980950e+19, -1.457971411008270e+19, 0.323694142367306e+19),
    Eigen::Vector3d(-0.830793937855839e+19, 1.626312281874286e+19, 1.127352972305230e+19),
    Eigen::Vector3d(-0.229205550837805e+19, -1.369449903473173e+19, -1.245825254708307e+19),
    Eigen::Vector3d(-0.671351245847551e+19, -0.611135168629429e+19, 0.353234294247616e+19),
    Eigen::Vector3d(-1.381422792700297e+19, 1.124806762483800e+19, 1.649919560390617e+19),
    Eigen::Vector3d(0.516545603089362e+19, -1.324122648484976e+19, -0.236636468303489e+19),
    Eigen::Vector3d(0.721792627994454e+19, 0.163201662596327e+19, -0.880998619055031e+19),
    Eigen::Vector3d(1.586729364274029e+19, 1.361619411446263e+19, 1.601626653096104e+19),
    Eigen::Vector3d(1.031349686197195e+19, 1.631762923281391e+19, -1.186587988932210e+19),
    Eigen::Vector3d(-0.663876480807451e+19, -0.154103196119490e+19, 1.816875234458907e+19),
    Eigen::Vector3d(0.394027265609175e+19, -0.874201634466797e+19, 0.818736504486801e+19),
    Eigen::Vector3d(-1.324067266190175e+19, -1.165126910506353e+19, 0.108771023140494e+19),
    Eigen::Vector3d(-1.823626088131604e+19, 0.729630702564710e+19, -0.809917337961613e+19),
    Eigen::Vector3d(-0.292582502359213e+19, -1.387467209874759e+19, -1.381824660707193e+19),
    Eigen::Vector3d(1.454791238638518e+19, -1.286329813014025e+19, -1.355514489565529e+19),
    Eigen::Vector3d(-1.269383752552599e+19, 0.745261990287794e+19, 0.909607942361092e+19),
    Eigen::Vector3d(-0.698938937688688e+19, -0.364883160407747e+19, -0.584583912823335e+19),
    Eigen::Vector3d(1.700399621244544e+19, -0.925264067482867e+19, -0.475379361242555e+19),
    Eigen::Vector3d(1.726198870690772e+19, -0.758780231187243e+19, -0.334887737078547e+19),
    Eigen::Vector3d(1.309033532576459e+19, 0.121409030037462e+19, 1.230908889085551e+19),
    Eigen::Vector3d(1.445188807815855e+19, -1.241318367937498e+19, 0.438202722195975e+19),
    Eigen::Vector3d(-0.594494465676728e+19, -1.774001380267719e+19, -1.214283285556921e+19),
    Eigen::Vector3d(1.382971089127973e+19, -1.840078076426628e+19, -1.512339557984698e+19),
    Eigen::Vector3d(-0.851183497564045e+19, 0.001939110657624e+19, -0.941605743549179e+19),
    Eigen::Vector3d(1.069512813760593e+19, 1.540394720886401e+19, -1.512975039973238e+19),
    Eigen::Vector3d(0.218299396639500e+19, 1.645002318084191e+19, -1.191404304275340e+19),
    Eigen::Vector3d(-1.615394157197436e+19, -0.577955879653773e+19, -1.168624676971501e+19),
    Eigen::Vector3d(0.401575586112253e+19, 0.156187207797486e+19, -0.752222692246955e+19),
    Eigen::Vector3d(0.955323260925026e+19, -0.555058940390666e+19, 0.473451167050053e+19),
    Eigen::Vector3d(1.687052353826543e+19, 0.011551154302223e+19, 0.972981186793522e+19),
    Eigen::Vector3d(-1.589162927615317e+19, -1.514163106429673e+19, 0.047085609369242e+19),
    Eigen::Vector3d(-1.042727539668589e+19, -0.822170023647049e+19, 0.681532572702402e+19),
    Eigen::Vector3d(0.913364970637906e+19, -0.448351423076589e+19, -0.707383922501539e+19),
    Eigen::Vector3d(0.630886833043254e+19, 1.049951521041643e+19, -0.766597194157089e+19),
    Eigen::Vector3d(0.246955325363617e+19, -1.306347854500058e+19, -0.429370427409693e+19),
    Eigen::Vector3d(-1.298026998133971e+19, -0.395632290211026e+19, -0.711754928552024e+19),
    Eigen::Vector3d(1.732247125080570e+19, 1.579917696649108e+19, -0.323190265492371e+19),
    Eigen::Vector3d(1.816207830171107e+19, -0.926403495025441e+19, -0.181889384490115e+19),
    Eigen::Vector3d(-0.725264196168851e+19, 0.855594213942620e+19, -0.991503869560599e+19),
    Eigen::Vector3d(-1.646298463451063e+19, -0.713104762426149e+19, 1.543202301872544e+19),
    Eigen::Vector3d(1.701982144001114e+19, -0.100105621025997e+19, 1.183774962061328e+19),
    Eigen::Vector3d(-0.263629183018113e+19, 0.584621579004934e+19, 1.666196387094082e+19),
    Eigen::Vector3d(-1.049073832144749e+19, 0.677733213942883e+19, 1.215545973610209e+19),
    Eigen::Vector3d(-0.694137746577489e+19, -0.231338354605725e+19, -0.974967378096229e+19),
    Eigen::Vector3d(1.603067541514244e+19, -1.758049252929393e+19, 0.378960096556254e+19),
    Eigen::Vector3d(1.744578763517192e+19, -0.329258511316066e+19, 0.149747162471435e+19),
    Eigen::Vector3d(-1.514644299056483e+19, 1.255681431749952e+19, 1.030873224992751e+19),
    Eigen::Vector3d(1.717928842539250e+19, 1.535996196043229e+19, 1.391064862439339e+19),
    Eigen::Vector3d(0.415050773442305e+19, 0.295009323007062e+19, -0.487722421721736e+19),
    Eigen::Vector3d(1.111478838810507e+19, 1.260482432058097e+19, 1.168701598044749e+19),
    Eigen::Vector3d(1.618622860996338e+19, -0.528781143180707e+19, 0.775535271368156e+19),
    Eigen::Vector3d(-1.556600785496970e+19, 1.296642997589307e+19, 0.725307205754933e+19),
    Eigen::Vector3d(1.661228256065608e+19, 1.442800479378303e+19, -0.971265834229438e+19),
    Eigen::Vector3d(-0.951441683147533e+19, 0.472959481993397e+19, -1.344348812180904e+19),
    Eigen::Vector3d(-1.043280051809409e+19, -0.371978886306206e+19, -0.755681894907009e+19),
    Eigen::Vector3d(-1.440740660763020e+19, -0.918729508479247e+19, -1.377177835180971e+19),
    Eigen::Vector3d(0.144162514012612e+19, 1.831009697912883e+19, -0.424409693178008e+19),
    Eigen::Vector3d(-0.909441497109060e+19, 0.506453629780457e+19, 1.714087303393509e+19),
    Eigen::Vector3d(1.237677378231660e+19, 0.938662704502446e+19, -1.008673307030685e+19),
    Eigen::Vector3d(-1.481280576449864e+19, 1.401223007120242e+19, -0.802559005042878e+19),
    Eigen::Vector3d(1.081802480110212e+19, -0.135757297093517e+19, 0.832746359635371e+19),
    Eigen::Vector3d(0.226259498800560e+19, -0.831924039209262e+19, -1.308989650055619e+19),
    Eigen::Vector3d(-1.842396994218123e+19, -0.095792006309586e+19, 1.274377841688512e+19),
    Eigen::Vector3d(0.122329325809611e+19, -1.734289066638887e+19, 0.978073977032595e+19),
    Eigen::Vector3d(-1.061816086615421e+19, -1.001509100941756e+19, 1.146046891050291e+19),
    Eigen::Vector3d(0.319429472962125e+19, 0.148907240501056e+19, 1.474250612341678e+19),
    Eigen::Vector3d(-0.139879129965701e+19, -0.370565047081416e+19, 1.424428947243857e+19),
    Eigen::Vector3d(0.695849082857949e+19, 0.942498142580667e+19, -1.787081116064895e+19),
    Eigen::Vector3d(-0.939511240121311e+19, 1.224720450133278e+19, 0.205975747421748e+19),
    Eigen::Vector3d(1.613880176280753e+19, 0.221306432489214e+19, 1.027904236833659e+19),
    Eigen::Vector3d(0.690312399498976e+19, 0.242390233515681e+19, -1.552214661926189e+19),
    Eigen::Vector3d(1.588395384503077e+19, 0.363280590618107e+19, -0.951403612427195e+19),
    Eigen::Vector3d(-0.302783836527925e+19, 0.243335984431116e+19, -0.164455260433500e+19),
    Eigen::Vector3d(1.158215718506735e+19, -0.082092487792463e+19, -0.128412669345756e+19),
    Eigen::Vector3d(-0.221177978857723e+19, -0.587294610603860e+19, 1.435749573211346e+19),
    Eigen::Vector3d(0.968375936781638e+19, 1.150023295570274e+19, -0.850659770110297e+19),
    Eigen::Vector3d(-1.812363738774686e+19, 1.099725264800027e+19, -1.384058296612486e+19),
    Eigen::Vector3d(1.826356284661767e+19, -0.803387818348255e+19, -0.972521326637361e+19),
    Eigen::Vector3d(-1.567780073893172e+19, -1.061799026989318e+19, -0.896607078176482e+19),
    Eigen::Vector3d(-1.218955483308987e+19, -0.920506037134477e+19, -1.551252690180505e+19),
    Eigen::Vector3d(0.052377020200300e+19, -1.057171552663306e+19, 0.627596031673933e+19),
    Eigen::Vector3d(1.029572129823921e+19, 0.197701275520618e+19, 0.091672504199485e+19),
    Eigen::Vector3d(-0.521003667178693e+19, 0.094919066251467e+19, 0.678450145642286e+19),
    Eigen::Vector3d(-0.762391976692548e+19, -0.720011711525928e+19, -0.031443760456174e+19),
    Eigen::Vector3d(-1.283681015885078e+19, 1.231678934095174e+19, -0.802708543092133e+19),
    Eigen::Vector3d(1.495217139404973e+19, -1.551102136453661e+19, 0.088992404167258e+19),
    Eigen::Vector3d(-0.838213197457646e+19, -0.365601213452562e+19, 1.567323558665757e+19),
    Eigen::Vector3d(-0.583345299333880e+19, 1.475773717182935e+19, 0.933300961684062e+19),
    Eigen::Vector3d(-1.660598250605305e+19, 1.382319308976448e+19, -0.011619335596907e+19),
    Eigen::Vector3d(-1.089756578214201e+19, -1.013803514046323e+19, 1.447538814150365e+19),
    Eigen::Vector3d(0.087384849164657e+19, -0.980341953987881e+19, 1.537155243651548e+19),
    Eigen::Vector3d(-0.969239446910151e+19, 1.597713050109788e+19, -0.165841504571241e+19),
    Eigen::Vector3d(0.339525506711963e+19, 0.555164297473728e+19, -0.640815825709116e+19),
    Eigen::Vector3d(1.154827411151740e+19, -0.810217944931940e+19, -0.602147547703868e+19),
    Eigen::Vector3d(-0.419008209126276e+19, -1.410252546762864e+19, -0.898108036072751e+19),
    Eigen::Vector3d(1.043648616776534e+19, 0.769384574341373e+19, -0.977832154324422e+19),
    Eigen::Vector3d(0.793241160127994e+19, 0.281756063703886e+19, -0.516650790940869e+19),
    Eigen::Vector3d(1.843752994729693e+19, -1.373740453561332e+19, -0.799107308347852e+19),
    Eigen::Vector3d(-1.769809607039277e+19, -1.236341043485832e+19, 1.791782767310794e+19),
    Eigen::Vector3d(0.587220520335672e+19, 0.818822599812079e+19, -0.029066082107191e+19),
    Eigen::Vector3d(0.121431173783529e+19, -1.742120389560180e+19, 0.703854696814365e+19),
    Eigen::Vector3d(1.686872888923929e+19, -0.863059466482042e+19, -1.275073913088488e+19),
    Eigen::Vector3d(0.720689641125352e+19, 1.702906809954598e+19, -0.209191319391396e+19),
    Eigen::Vector3d(-0.119859553790866e+19, -1.754047274596617e+19, -1.252390030356249e+19),
    Eigen::Vector3d(-0.750432588559682e+19, 1.091138756493226e+19, -0.363685006307817e+19),
    Eigen::Vector3d(-0.292361877887738e+19, 1.048582936196728e+19, 0.356833842856448e+19),
    Eigen::Vector3d(-0.383002588349182e+19, -1.486132196006383e+19, 1.272020870169739e+19),
    Eigen::Vector3d(-1.463015950215163e+19, 0.790902876388827e+19, 1.508782570074385)};

// pre-calculated cartesian to spherical results
static const std::array<Eigen::Vector3d, 200> cartToSpher_results = {
    Eigen::Vector3d(1.745915910766343e+19, -2.979636408720502e+00, -1.281163364564730e+00),
    Eigen::Vector3d(2.615392981399442e+19, 5.181205779032036e-01, -6.656738190677697e-01),
    Eigen::Vector3d(1.343903497818229e+19, -3.018595938963125e+00, 9.173004748641261e-01),
    Eigen::Vector3d(1.577878067167753e+19, -2.555444756648698e+00, 7.000577816395046e-01),
    Eigen::Vector3d(2.282724812335151e+19, -2.841172085459271e+00, 9.071033834235104e-01),
    Eigen::Vector3d(2.339455665541235e+19, 4.745019264601218e-01, 7.782216902193364e-01),
    Eigen::Vector3d(1.718475610750953e+19, 1.742990407821532e+00, 5.235780237256911e-01),
    Eigen::Vector3d(1.946968331155367e+19, 1.335713478847950e+00, 1.050564190848418e+00),
    Eigen::Vector3d(2.623406734452221e+19, -2.497918503991356e+00, -5.476099071010454e-01),
    Eigen::Vector3d(1.544329852751880e+19, -1.629673108183411e+00, 4.137171919527509e-01),
    Eigen::Vector3d(1.985676015113415e+19, -8.806434717266913e-01, -2.246760136624382e-01),
    Eigen::Vector3d(1.840184794613095e+19, -2.666344535143324e+00, 7.834162569280748e-02),
    Eigen::Vector3d(2.408068104503708e+19, -1.950373913974256e+00, 7.341855961839185e-01),
    Eigen::Vector3d(1.953164448895419e+19, -1.899568750497612e+00, 8.392538101992136e-01),
    Eigen::Vector3d(2.174687094576450e+19, 1.120642839419467e+00, -4.858932371963295e-01),
    Eigen::Vector3d(2.588616561295539e+19, -6.039289384891087e-01, -6.282391741798035e-01),
    Eigen::Vector3d(2.032950732983136e+19, -8.316903363563315e-02, -5.426435116512016e-01),
    Eigen::Vector3d(1.158441782891091e+19, 1.055509942856188e+00, 6.137015852440275e-01),
    Eigen::Vector3d(1.321033517924564e+19, -2.310896756029747e-02, -1.890243040081968e-01),
    Eigen::Vector3d(8.134801604790313e+18, 2.858208230206836e+00, -6.680306068444719e-02),
    Eigen::Vector3d(1.324294682127988e+19, 2.018237938894810e+00, 6.610200879473961e-01),
    Eigen::Vector3d(2.103905235573329e+19, 2.093454387428885e+00, -3.260677119429098e-01),
    Eigen::Vector3d(2.211065173424431e+19, -2.212346038912278e-01, 5.960910111503877e-01),
    Eigen::Vector3d(2.237799394589075e+19, 2.842741427366838e+00, 5.547878514397111e-01),
    Eigen::Vector3d(1.941731611184397e+19, -1.163278029094268e+00, -3.834172510939616e-01),
    Eigen::Vector3d(1.908763108338222e+19, 1.868932098423647e+00, 6.522942855161468e-01),
    Eigen::Vector3d(2.393971887220257e+19, 1.067317026701969e+00, -8.186336466293316e-01),
    Eigen::Vector3d(2.594666367676564e+19, 2.218468142775997e+00, 5.003000840805711e-01),
    Eigen::Vector3d(1.616898887596036e+19, -2.873201367486828e+00, -2.447163512991109e-02),
    Eigen::Vector3d(1.595822789435241e+19, -1.160298692745226e+00, -1.164463231378666e+00),
    Eigen::Vector3d(1.673627803973413e+19, 4.847568167969979e-01, 1.747894404296456e-01),
    Eigen::Vector3d(1.413109049022800e+19, 8.027186488240950e-01, -1.140729699669801e+00),
    Eigen::Vector3d(2.310691212093759e+19, 8.522157316813728e-01, 7.340575318392092e-01),
    Eigen::Vector3d(2.515776542821286e+19, 2.381388963920479e+00, 3.393248195976561e-01),
    Eigen::Vector3d(2.255992780362532e+19, 1.330677711717219e+00, -6.178718610727766e-01),
    Eigen::Vector3d(1.905360310311831e+19, 1.902393443000041e+00, -6.014769522993092e-01),
    Eigen::Vector3d(2.179249255638786e+19, -2.225258418114034e+00, -1.343088215324617e-02),
    Eigen::Vector3d(2.189216182300226e+19, -2.303301371655416e+00, -3.582244288894865e-01),
    Eigen::Vector3d(1.885679993417033e+19, -2.849215575561775e+00, 3.237798081776332e-01),
    Eigen::Vector3d(2.089013931794391e+19, -1.817076157462384e+00, -7.800277239774592e-01),
    Eigen::Vector3d(2.043841915044844e+19, -2.094108337874594e-01, 5.088609816963553e-01),
    Eigen::Vector3d(1.848227268961013e+19, 5.475545127528524e-01, -4.224933404639714e-01),
    Eigen::Vector3d(1.895669058188581e+19, 1.309084385665468e+00, -7.197490455379321e-01),
    Eigen::Vector3d(1.167713074555198e+19, -2.104132612534897e+00, -8.781737659705520e-01),
    Eigen::Vector3d(2.896673270772058e+19, 2.443020304605353e+00, 6.427531293112326e-01),
    Eigen::Vector3d(1.581099596247302e+19, 4.988499752693132e-01, -7.621118558765164e-01),
    Eigen::Vector3d(1.686570505381358e+19, -4.010774005699571e-01, 1.089864903422863e+00),
    Eigen::Vector3d(2.432807089596298e+19, 2.519690967407011e+00, -5.393777199262445e-01),
    Eigen::Vector3d(2.004720408373652e+19, 1.124577690404520e+00, -5.284230362214511e-02),
    Eigen::Vector3d(2.030281884125480e+19, -3.706790236653720e-01, 9.185259402709464e-01),
    Eigen::Vector3d(2.094559787289580e+19, -3.108048519008619e+00, -6.965812365767332e-01),
    Eigen::Vector3d(1.138191901599662e+19, 1.684994591742349e+00, 1.179968480260833e+00),
    Eigen::Vector3d(1.948863394341030e+19, -1.844136684903499e-01, 3.160443307624298e-01),
    Eigen::Vector3d(1.050692663092711e+19, 2.295853671660407e+00, 9.471010115349079e-01),
    Eigen::Vector3d(1.463006605995911e+19, 4.873980520553557e-01, -9.572845545539586e-01),
    Eigen::Vector3d(1.615931283469279e+19, 2.322234691542536e+00, -3.049732198769437e-01),
    Eigen::Vector3d(8.381414216720189e+18, 1.576868017571439e+00, 1.159379420310639e+00),
    Eigen::Vector3d(1.868871489758456e+19, -2.669048679089865e+00, -1.721994466679441e-01),
    Eigen::Vector3d(1.958223519707740e+19, -3.065438474308808e+00, -4.997356152744586e-01),
    Eigen::Vector3d(1.432599500141936e+19, -1.727791227181056e+00, 1.393708130999532e+00),
    Eigen::Vector3d(1.165747792158942e+19, -2.540228242270682e+00, 6.641685712814744e-01),
    Eigen::Vector3d(2.307495219079300e+19, 2.384110888795132e+00, 2.920504626092366e-01),
    Eigen::Vector3d(1.964330559765855e+19, -6.527710052214746e-01, -1.077796290001903e+00),
    Eigen::Vector3d(8.805677926424672e+18, 2.938142365395414e+00, 6.619619732807855e-01),
    Eigen::Vector3d(2.224422656354172e+19, -8.049373526601412e-01, -8.270975998639151e-01),
    Eigen::Vector3d(1.468966188542068e+19, -3.135432076810703e+00, 6.404052994590654e-01),
    Eigen::Vector3d(2.795830215222462e+19, -2.525770006667301e+00, 6.936722868302224e-01),
    Eigen::Vector3d(1.267194561481080e+19, 8.029555275575934e-02, 6.309964844642573e-01),
    Eigen::Vector3d(1.243696846331663e+19, 1.956247376808433e+00, 8.133697449480581e-01),
    Eigen::Vector3d(8.064581514484499e+18, -1.666094387641851e+00, 3.718728774979029e-01),
    Eigen::Vector3d(1.931928891506514e+19, 2.791201270121241e+00, 1.030050562371585e+00),
    Eigen::Vector3d(2.016236135575950e+19, 1.924896262581471e+00, -8.349563425338337e-01),
    Eigen::Vector3d(2.473561161472340e+19, 8.674951263888911e-01, 6.675951457490700e-01),
    Eigen::Vector3d(1.742453769115026e+19, 6.339571600500962e-01, -2.130926834744453e-02),
    Eigen::Vector3d(1.536785263649110e+19, -2.312762890060090e+00, -4.121280524075395e-01),
    Eigen::Vector3d(1.586661021156314e+19, 5.957625687020321e-01, 9.849287504689650e-01),
    Eigen::Vector3d(2.097654039503831e+19, 2.398676077003683e+00, -9.848811952539167e-01),
    Eigen::Vector3d(2.124529069540180e+19, -1.689430632289057e+00, -5.181876138473582e-01),
    Eigen::Vector3d(1.538862992901511e+19, 2.890468142042050e+00, -3.665751266855002e-02),
    Eigen::Vector3d(2.318404284234101e+19, 1.997262216719014e+00, 6.874540118174083e-01),
    Eigen::Vector3d(2.435184214988033e+19, -7.271569530983584e-01, 3.451032391767592e-01),
    Eigen::Vector3d(1.726063719520847e+19, -1.865521974354611e+00, 9.108895953102227e-01),
    Eigen::Vector3d(2.227897791276425e+19, 7.847323375635722e-01, -1.546683094122208e-01),
    Eigen::Vector3d(1.916014672579019e+19, -1.170711452285746e+00, -8.949526084428573e-01),
    Eigen::Vector3d(2.024153294740971e+19, -7.707808058229653e-01, -1.030759243880583e+00),
    Eigen::Vector3d(6.933634768522290e+18, 1.275442506835550e+00, 7.493762286435260e-02),
    Eigen::Vector3d(1.137963867709561e+19, -1.964407587356235e+00, 2.173117188248326e-03),
    Eigen::Vector3d(1.085180336872030e+19, -2.401781326401405e+00, 1.356361326943177e+00),
    Eigen::Vector3d(1.903853924155135e+19, 4.176581040049163e-02, 6.600022681676294e-01),
    Eigen::Vector3d(1.109791574671571e+19, -3.907954909203935e-01, 8.718212051121218e-01),
    Eigen::Vector3d(1.730476265410181e+19, -3.116859518141362e+00, 6.160346435271029e-01),
    Eigen::Vector3d(1.393052181019948e+19, -1.965273555625330e+00, -4.593592798945189e-01),
    Eigen::Vector3d(1.968649113283872e+19, -8.492931053571535e-01, 1.651745401446721e-01),
    Eigen::Vector3d(2.146167498010953e+19, 2.043082461665390e+00, 5.530518573609152e-01),
    Eigen::Vector3d(1.865478166027832e+19, -1.736629762168454e+00, -7.312916630397692e-01),
    Eigen::Vector3d(9.741525323425438e+18, -2.403112637045195e+00, 3.710635036034424e-01),
    Eigen::Vector3d(2.428117324364855e+19, 2.458230173148433e+00, 7.470886873329241e-01),
    Eigen::Vector3d(1.440873681636585e+19, -1.198849945920649e+00, -1.649786164615298e-01),
    Eigen::Vector3d(1.150555495088445e+19, 2.223669239804272e-01, -8.721536357243980e-01),
    Eigen::Vector3d(2.633804364979404e+19, 7.091948146648283e-01, 6.536699102100736e-01),
    Eigen::Vector3d(2.265904558557812e+19, 1.007146062057682e+00, -5.511540913142532e-01),
    Eigen::Vector3d(1.940493595561098e+19, -2.913505728759050e+00, 1.211929480873794e+00),
    Eigen::Vector3d(1.260878839352587e+19, -1.147337054390309e+00, 7.067135918866818e-01),
    Eigen::Vector3d(1.767061396346328e+19, -2.419960057006764e+00, 6.159368849228559e-02),
    Eigen::Vector3d(2.124603296093196e+19, 2.761001062979498e+00, -3.911034089947461e-01),
    Eigen::Vector3d(1.979926557249783e+19, -1.778626660299130e+00, -7.724850484811645e-01),
    Eigen::Vector3d(2.368223272263447e+19, -7.240182352319797e-01, -6.094006944003678e-01),
    Eigen::Vector3d(1.730357522079937e+19, 2.610708472119482e+00, 5.535099263521391e-01),
    Eigen::Vector3d(9.815262148808751e+18, -2.660458703340533e+00, -6.379957625988799e-01),
    Eigen::Vector3d(1.993353456765485e+19, -4.983369510342870e-01, -2.408026784415665e-01),
    Eigen::Vector3d(1.915113515398044e+19, -4.141441321909263e-01, -1.757694028621337e-01),
    Eigen::Vector3d(1.800956866561236e+19, 9.248250088806263e-02, 7.525124543001853e-01),
    Eigen::Vector3d(1.954856415841119e+19, -7.096565319424292e-01, 2.260821229272416e-01),
    Eigen::Vector3d(2.230468216427874e+19, -1.894149519724074e+00, -5.756824223323204e-01),
    Eigen::Vector3d(2.754209015190220e+19, -9.262829758503933e-01, -5.812884597126180e-01),
    Eigen::Vector3d(1.269306299897824e+19, 3.139314522835862e+00, -8.357907989568506e-01),
    Eigen::Vector3d(2.409515931990244e+19, 9.638987776505291e-01, -6.788733786852120e-01),
    Eigen::Vector3d(2.042824385335494e+19, 1.438862583243919e+00, -6.226799883557534e-01),
    Eigen::Vector3d(2.075864860139196e+19, -2.798003672609341e+00, -5.979604349569190e-01),
    Eigen::Vector3d(8.668889052077156e+18, 3.709322226069206e-01, -1.050610336747213e+00),
    Eigen::Vector3d(1.202035343803622e+19, -5.263443676000190e-01, 4.048431352098446e-01),
    Eigen::Vector3d(1.947555253021470e+19, 6.846837783397290e-03, 5.231266328564393e-01),
    Eigen::Vector3d(2.195528587376925e+19, -2.380357347635511e+00, 2.144778245580525e-02),
    Eigen::Vector3d(1.492558513902036e+19, -2.473915554772496e+00, 4.741926612440897e-01),
    Eigen::Vector3d(1.239212081113176e+19, -4.563239911066898e-01, -6.075207917082044e-01),
    Eigen::Vector3d(1.445021678292242e+19, 1.029735642908784e+00, -5.592010695216911e-01),
    Eigen::Vector3d(1.397100788639222e+19, -1.383958635766847e+00, -3.123855447590249e-01),
    Eigen::Vector3d(1.532316571489196e+19, -2.845742496070379e+00, -4.830654122358112e-01),
    Eigen::Vector3d(2.366700652436626e+19, 7.394396522058796e-01, -1.369853254701587e-01),
    Eigen::Vector3d(2.046928935298044e+19, -4.716756470441087e-01, -8.897700523243629e-02),
    Eigen::Vector3d(1.497040258820778e+19, 2.273937951195540e+00, -7.238969707808425e-01),
    Eigen::Vector3d(2.366493265881165e+19, -2.732833772029292e+00, 7.103578235771059e-01),
    Eigen::Vector3d(2.075593292208984e+19, -5.874939618712963e-02, 6.069086237115968e-01),
    Eigen::Vector3d(1.785355185150112e+19, 1.994431580582244e+00, 1.203377557370447e+00),
    Eigen::Vector3d(1.742822489105592e+19, 2.568013327817008e+00, 7.718445543406821e-01),
    Eigen::Vector3d(1.218977454216112e+19, -2.819895122499758e+00, -9.270018801672206e-01),
    Eigen::Vector3d(2.409185230148160e+19, -8.314757092618574e-01, 1.579540252439337e-01),
    Eigen::Vector3d(1.781681913826790e+19, -1.865382144055127e-01, 8.414747265065486e-02),
    Eigen::Vector3d(2.221166994332679e+19, 2.449401046992346e+00, 4.826333464289201e-01),
    Eigen::Vector3d(2.691769914721705e+19, 7.295445657237447e-01, 5.430907095731659e-01),
    Eigen::Vector3d(7.051034008188129e+18, 6.179235378801688e-01, -7.638450867858962e-01),
    Eigen::Vector3d(2.046964727571777e+19, 8.481344563014401e-01, 6.076548531056116e-01),
    Eigen::Vector3d(1.871097116843363e+19, -3.157559128817445e-01, 4.273730622946748e-01),
    Eigen::Vector3d(2.151827040290924e+19, 2.447053200483223e+00, 3.437985251194876e-01),
    Eigen::Vector3d(2.405142378901185e+19, 7.151448491306858e-01, -4.156982702825452e-01),
    Eigen::Vector3d(1.713536015626832e+19, 2.680269570900784e+00, -9.019645401492768e-01),
    Eigen::Vector3d(1.340841782109767e+19, -2.799096828532276e+00, -5.987225274035171e-01),
    Eigen::Vector3d(2.194633534565652e+19, -2.573928038408287e+00, -6.783647238461126e-01),
    Eigen::Vector3d(1.885073720563977e+19, 1.492224526631543e+00, -2.270890072186215e-01),
    Eigen::Vector3d(2.005411279373037e+19, 2.633479412464928e+00, 1.025032495549675e+00),
    Eigen::Vector3d(1.852121703810649e+19, 6.488596648962528e-01, -5.759171487701540e-01),
    Eigen::Vector3d(2.191282505389515e+19, 2.383960975732042e+00, -3.749766651244434e-01),
    Eigen::Vector3d(1.371930446186215e+19, -1.248391595685319e-01, 6.522659787979996e-01),
    Eigen::Vector3d(1.567400673651912e+19, -1.305248008045109e+00, -9.883764207661481e-01),
    Eigen::Vector3d(2.242240325246931e+19, -3.089646287745038e+00, 6.044993830994554e-01),
    Eigen::Vector3d(1.994831254809432e+19, -1.500377238591111e+00, 5.124386562767068e-01),
    Eigen::Vector3d(1.855774058863441e+19, -2.385414228230247e+00, 6.656332700464275e-01),
    Eigen::Vector3d(1.515791351888614e+19, 4.362161573704835e-01, 1.336141630728518e+00),
    Eigen::Vector3d(1.478473013235161e+19, -1.931735302294635e+00, 1.299581021953148e+00),
    Eigen::Vector3d(2.136859286494552e+19, 9.348235088167891e-01, -9.905215326181956e-01),
    Eigen::Vector3d(1.557256420701128e+19, 2.225166398993514e+00, 1.326570954569631e-01),
    Eigen::Vector3d(1.926180905458697e+19, 1.362769956540684e-01, 5.629092885824879e-01),
    Eigen::Vector3d(1.715999589424326e+19, 3.376822301500499e-01, -1.130332995943495e+00),
    Eigen::Vector3d(1.886833728437679e+19, 2.248420672980083e-01, -5.284934244660284e-01),
    Eigen::Vector3d(4.218245911109022e+18, 2.464622527483630e+00, -4.004865743469092e-01),
    Eigen::Vector3d(1.168200599553232e+19, -7.076007404379675e-02, -1.101460580484142e-01),
    Eigen::Vector3d(1.566911450897111e+19, -1.930973216313744e+00, 1.158723815465353e+00),
    Eigen::Vector3d(1.727404868516970e+19, 8.709363918229145e-01, -5.149020040900931e-01),
    Eigen::Vector3d(2.531733664524510e+19, 2.596195026404115e+00, -5.783989350543295e-01),
    Eigen::Vector3d(2.219641186308813e+19, -4.144110206512315e-01, -4.535323251232949e-01),
    Eigen::Vector3d(2.095055079573831e+19, -2.546290138146512e+00, -4.422382838073798e-01),
    Eigen::Vector3d(2.177055062115407e+19, -2.494797517363966e+00, -7.931208053276289e-01),
    Eigen::Vector3d(1.230541272358825e+19, -1.521292320354130e+00, 5.352036691215389e-01),
    Eigen::Vector3d(1.052382256064235e+19, 1.897134966772572e-01, 8.722005481459139e-02),
    Eigen::Vector3d(8.606677933289568e+18, 2.961384072312275e+00, 9.080142090200219e-01),
    Eigen::Vector3d(1.049117296078609e+19, -2.384775587921142e+00, -2.997612385853576e-02),
    Eigen::Vector3d(1.951719998460503e+19, 2.376865358794192e+00, -4.238607731984854e-01),
    Eigen::Vector3d(2.156272658937401e+19, -8.037411944565220e-01, 4.128313136668436e-02),
    Eigen::Vector3d(1.814598784640519e+19, -2.730301326960318e+00, 1.042625000487572e+00),
    Eigen::Vector3d(1.840991713089243e+19, 1.947227985772421e+00, 5.316491453789447e-01),
    Eigen::Vector3d(2.160677724891484e+19, 2.447392172844163e+00, -5.377660660334726e-03),
    Eigen::Vector3d(2.076231100654655e+19, -2.392285725872988e+00, 7.714778187915298e-01),
    Eigen::Vector3d(1.825254147152598e+19, -1.481894174509510e+00, 1.001275707816730e+00),
    Eigen::Vector3d(1.876063831690242e+19, 2.116085162966377e+00, -8.851418305742310e-02),
    Eigen::Vector3d(9.133071166791428e+18, 1.021908059452677e+00, -7.777011897479614e-01),
    Eigen::Vector3d(1.533838693293056e+19, -6.117937796112829e-01, -4.034302737407384e-01),
    Eigen::Vector3d(1.723652566332556e+19, -1.859604902172111e+00, -5.480799096467175e-01),
    Eigen::Vector3d(1.623979920000481e+19, 6.352628827871998e-01, -6.461548032694648e-01),
    Eigen::Vector3d(9.876973510822734e+18, 3.412962261182188e-01, -5.504679799059337e-01),
    Eigen::Vector3d(2.434165242866752e+19, -6.403438095056371e-01, -3.344905828065776e-01),
    Eigen::Vector3d(2.805574933272694e+19, -2.531825111460984e+00, 6.927436757265463e-01),
    Eigen::Vector3d(1.008039298140391e+19, 9.486512608081878e-01, -2.883827181458670e-02),
    Eigen::Vector3d(1.882854326790950e+19, -1.501205793795197e+00, 3.831277009898804e-01),
    Eigen::Vector3d(2.283905705126553e+19, -4.729104661129118e-01, -5.923191287770468e-01),
    Eigen::Vector3d(1.860926159288392e+19, 1.170441581660168e+00, -1.126505849198421e-01),
    Eigen::Vector3d(2.158594205099812e+19, -1.639023402741245e+00, -6.189592517458231e-01),
    Eigen::Vector3d(1.373317020832075e+19, 2.173254601998746e+00, -2.680196642166605e-01),
    Eigen::Vector3d(1.145570614642631e+19, 1.842706927312451e+00, 3.167606875392142e-01),
    Eigen::Vector3d(1.993318083206067e+19, -1.823025424691292e+00, 6.920831777571700e-01),
    Eigen::Vector3d(1.663112452741575e+19, 2.645996842325098e+00, 9.072041806837638e-20)


};

// vec3 spherical test coords
// distance, theta, phi
// NOTE: Should be MatrixBase<double, 3, 1>
static const std::array<Eigen::Vector3d, 65> spher_coords = {
    // NOTE: should the valid/invalid radial boundaries be tested with each angle value?
    // Edge cases
    //
    Eigen::Vector3d(-5, 0, 0),        // invalid radial dist
    Eigen::Vector3d(-DBL_MIN, 0, 0),  // invalid edge radial distance....
    Eigen::Vector3d(0, 0, 0),         // valid boundary radial dist
    Eigen::Vector3d(DBL_MIN, 0, 0),   // valid open boundary
    Eigen::Vector3d(1, 0, 0),         // valid
    // the following tests values of theta and phi, from 0 to 2pi
    //(pi/2)
    Eigen::Vector3d(-5, (M_PI / 2), 0),
    Eigen::Vector3d(-5, 0, (M_PI / 2)),
    Eigen::Vector3d(-5, (M_PI / 2), (M_PI / 2)),

    Eigen::Vector3d(-DBL_MIN, (M_PI / 2), 0),
    Eigen::Vector3d(-DBL_MIN, 0, (M_PI / 2)),
    Eigen::Vector3d(-DBL_MIN, (M_PI / 2), (M_PI / 2)),

    Eigen::Vector3d(0, (M_PI / 2), 0),
    Eigen::Vector3d(0, 0, (M_PI / 2)),
    Eigen::Vector3d(0, (M_PI / 2), (M_PI / 2)),

    Eigen::Vector3d(DBL_MIN, (M_PI / 2), 0),
    Eigen::Vector3d(DBL_MIN, 0, (M_PI / 2)),
    Eigen::Vector3d(DBL_MIN, (M_PI / 2), (M_PI / 2)),

    Eigen::Vector3d(1, (M_PI / 2), 0),
    Eigen::Vector3d(1, 0, (M_PI / 2)),
    Eigen::Vector3d(1, (M_PI / 2), (M_PI / 2)),

    //(pi)
    Eigen::Vector3d(-5, (M_PI), 0),
    Eigen::Vector3d(-5, 0, (M_PI)),
    Eigen::Vector3d(-5, (M_PI), (M_PI)),

    Eigen::Vector3d(-DBL_MIN, (M_PI), 0),
    Eigen::Vector3d(-DBL_MIN, 0, (M_PI)),
    Eigen::Vector3d(-DBL_MIN, (M_PI), (M_PI)),

    Eigen::Vector3d(0, (M_PI), 0),
    Eigen::Vector3d(0, 0, (M_PI)),
    Eigen::Vector3d(0, (M_PI), (M_PI)),

    Eigen::Vector3d(DBL_MIN, (M_PI), 0),
    Eigen::Vector3d(DBL_MIN, 0, (M_PI)),
    Eigen::Vector3d(DBL_MIN, (M_PI), (M_PI)),

    Eigen::Vector3d(1, M_PI, 0),
    Eigen::Vector3d(1, 0, M_PI),
    Eigen::Vector3d(1, M_PI, M_PI),

    //(3pi/2)
    Eigen::Vector3d(-5, ((3 * M_PI) / 2), 0),
    Eigen::Vector3d(-5, 0, ((3 * M_PI) / 2)),
    Eigen::Vector3d(-5, ((3 * M_PI) / 2), ((3 * M_PI) / 2)),

    Eigen::Vector3d(-DBL_MIN, ((3 * M_PI) / 2), 0),
    Eigen::Vector3d(-DBL_MIN, 0, ((3 * M_PI) / 2)),
    Eigen::Vector3d(-DBL_MIN, ((3 * M_PI) / 2), ((3 * M_PI) / 2)),

    Eigen::Vector3d(0, ((3 * M_PI) / 2), 0),
    Eigen::Vector3d(0, 0, ((3 * M_PI) / 2)),
    Eigen::Vector3d(0, ((3 * M_PI) / 2), ((3 * M_PI) / 2)),

    Eigen::Vector3d(DBL_MIN, ((3 * M_PI) / 2), 0),
    Eigen::Vector3d(DBL_MIN, 0, ((3 * M_PI) / 2)),
    Eigen::Vector3d(DBL_MIN, ((3 * M_PI) / 2), ((3 * M_PI) / 2)),

    Eigen::Vector3d(1, ((3 * M_PI) / 2), 0),
    Eigen::Vector3d(1, 0, ((3 * M_PI) / 2)),
    Eigen::Vector3d(1, ((3 * M_PI) / 2), ((3 * M_PI) / 2)),
    //(2pi)
    Eigen::Vector3d(-5, (2 * M_PI), 0),
    Eigen::Vector3d(-5, 0, (2 * M_PI)),
    Eigen::Vector3d(-5, (2 * M_PI), (2 * M_PI)),

    Eigen::Vector3d(-DBL_MIN, (2 * M_PI), 0),
    Eigen::Vector3d(-DBL_MIN, 0, (2 * M_PI)),
    Eigen::Vector3d(-DBL_MIN, (2 * M_PI), (2 * M_PI)),

    Eigen::Vector3d(0, (2 * M_PI), 0),
    Eigen::Vector3d(0, 0, (2 * M_PI)),
    Eigen::Vector3d(0, (2 * M_PI), (2 * M_PI)),

    Eigen::Vector3d(DBL_MIN, (2 * M_PI), 0),
    Eigen::Vector3d(DBL_MIN, 0, (2 * M_PI)),
    Eigen::Vector3d(DBL_MIN, (2 * M_PI), (2 * M_PI)),

    Eigen::Vector3d(1, 2 * M_PI, 0),
    Eigen::Vector3d(1, 0, 2 * M_PI),
    Eigen::Vector3d(1, 2 * M_PI, 2 * M_PI)

    // TODO: add random values between boundaries


};

// pre-calculated spherical to cartesian conversion results
static const std::array<Eigen::Matrix<double, 3, 1>, 65> spherToCart_results = {
    Eigen::Matrix<double, 3, 1>(0, 0, -5),
    Eigen::Matrix<double, 3, 1>(0, 0, -1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(0, 0, 1),
    Eigen::Matrix<double, 3, 1>(0, 0, -5),
    Eigen::Matrix<double, 3, 1>(-5.000000000000000e+00, 0, 2.185569414336896e-07),
    Eigen::Matrix<double, 3, 1>(2.185569414336896e-07, -5.000000000000000e+00, 2.185569414336896e-07),
    Eigen::Matrix<double, 3, 1>(0, 0, -1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(-1.175494350822288e-38, 0, 5.138248999765994e-46),
    Eigen::Matrix<double, 3, 1>(5.138248999765994e-46, -1.175494350822288e-38, 5.138248999765994e-46),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(1.175494350822288e-38, 0, -5.138248999765994e-46),
    Eigen::Matrix<double, 3, 1>(-5.138248999765994e-46, 1.175494350822288e-38, -5.138248999765994e-46),
    Eigen::Matrix<double, 3, 1>(0, 0, 1),
    Eigen::Matrix<double, 3, 1>(1.000000000000000e+00, 0, -4.371138828673793e-08),
    Eigen::Matrix<double, 3, 1>(-4.371138828673793e-08, 1.000000000000000e+00, -4.371138828673793e-08),
    Eigen::Matrix<double, 3, 1>(0, 0, -5),
    Eigen::Matrix<double, 3, 1>(4.371138828673793e-07, 0, 5.000000000000000e+00),
    Eigen::Matrix<double, 3, 1>(-4.371138828673793e-07, -3.821370931907940e-14, 5.000000000000000e+00),
    Eigen::Matrix<double, 3, 1>(0, 0, -1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(1.027649799953199e-45, 0, 1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(-1.027649799953199e-45, -8.983999885708567e-53, 1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(-1.027649799953199e-45, 0, -1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(1.027649799953199e-45, 8.983999885708567e-53, -1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(0, 0, 1),
    Eigen::Matrix<double, 3, 1>(-8.742277657347586e-08, 0, -1.000000000000000e+00),
    Eigen::Matrix<double, 3, 1>(8.742277657347586e-08, 7.642741863815879e-15, -1.000000000000000e+00),
    Eigen::Matrix<double, 3, 1>(0, 0, -5),
    Eigen::Matrix<double, 3, 1>(5.000000000000000e+00, 0, -5.962440319251527e-08),
    Eigen::Matrix<double, 3, 1>(5.962440319251527e-08, -5.000000000000000e+00, -5.962440319251527e-08),
    Eigen::Matrix<double, 3, 1>(0, 0, -1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(1.175494350822288e-38, 0, -1.401762982479041e-46),
    Eigen::Matrix<double, 3, 1>(1.401762982479041e-46, -1.175494350822288e-38, -1.401762982479041e-46),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(-1.175494350822288e-38, 0, 1.401762982479041e-46),
    Eigen::Matrix<double, 3, 1>(-1.401762982479041e-46, 1.175494350822288e-38, 1.401762982479041e-46),
    Eigen::Matrix<double, 3, 1>(0, 0, 1),
    Eigen::Matrix<double, 3, 1>(-1.000000000000000e+00, 0, 1.192488063850305e-08),
    Eigen::Matrix<double, 3, 1>(-1.192488063850305e-08, 1.000000000000000e+00, 1.192488063850305e-08),
    Eigen::Matrix<double, 3, 1>(0, 0, -5),
    Eigen::Matrix<double, 3, 1>(-8.742277657347586e-07, 0, -5.000000000000000e+00),
    Eigen::Matrix<double, 3, 1>(-8.742277657347586e-07, -1.528548372763176e-13, -5.000000000000000e+00),
    Eigen::Matrix<double, 3, 1>(0, 0, -1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(-2.055299599906398e-45, 0, -1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(-2.055299599906398e-45, -3.593599954283427e-52, -1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 0),
    Eigen::Matrix<double, 3, 1>(0, 0, 1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(2.055299599906398e-45, 0, 1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(2.055299599906398e-45, 3.593599954283427e-52, 1.175494350822288e-38),
    Eigen::Matrix<double, 3, 1>(0, 0, 1),
    Eigen::Matrix<double, 3, 1>(1.748455531469517e-07, 0, 1.000000000000000e+00),
    Eigen::Matrix<double, 3, 1>(1.748455531469517e-07, 3.057096745526352e-14, 1.000000000000000e+00)
    // TODO: add values between edge cases
};

// Test cartesianToSpherical conversion'
TEST_CASE("Test coordinate conversion - Cartesian to spherical.", "[utility][math][coordinates]") {
    //***Table heading***
    INFO("************Calculating Spherical coordinates for the origin****************");
    INFO("----------------------------------------------------------------------------");
    INFO(std::left << std::setw(18) << "Input" << std::setw(18) << "Ext calc result" << std::setw(18) << "Util result"
                   << std::setw(18) << "Difference");
    INFO("----------------------------------------------------------------------------");
    // Loop through test values and compare to results array

    for (size_t i = 0; i < cart_coords.size(); i++) {
        Eigen::Vector3d cart_input   = cart_coords[i];
        Eigen::Vector3d cart_compare = cartToSpher_results[i];
        Eigen::Vector3d spher_result = utility::math::coordinates::cartesianToSpherical(cart_input);
        // NOTE: possibly use epsilon
        Eigen::Vector3d result_diff = (spher_result - cart_compare);

        //***New output - Table format***
        INFO(std::left << std::setw(18) << cart_input.x() << std::setw(18) << cart_compare.x() << std::setw(18)
                       << spher_result.x() << std::setw(18) << result_diff.x() << "\n"
                       << std::left << std::setw(18) << cart_input.y() << std::setw(18) << cart_compare.y()
                       << std::setw(18) << spher_result.y() << std::setw(18) << result_diff.y() << "\n"
                       << std::left << std::setw(18) << cart_input.z() << std::setw(18) << cart_compare.z()
                       << std::setw(18) << spher_result.z() << std::setw(18) << result_diff.z());
        // old output
        // INFO("Input: \n"
        //      << std::left << cart_input << "\nExternally calculated result: \n"
        //      << std::left << cart_compare << "\nUtilities method result: \n"
        //      << std::left << spher_result
        //      << "\nThe difference between the externally calculated result and utilities method result: \n"
        //      << std::left << result_diff);
        INFO("----------------------------------------------------------------------------");
        INFO("Difference should be within the error threshold: " << ERROR_THRESHOLD << ".");
        INFO("Failed test value at index: " << i);
        // TEST purposes only
        // REQUIRE(true);

        REQUIRE(result_diff[0] <= ERROR_THRESHOLD);
        REQUIRE(result_diff[1] <= ERROR_THRESHOLD);
        REQUIRE(result_diff[2] <= ERROR_THRESHOLD);
    }
}

// Test sphericalToCartesian conversion
TEST_CASE("Test coordinate conversion - Spherical to cartesian.", "[utility][math][coordinates]") {
    INFO("************Calculating cartesian coordinates for the origin****************");

    for (size_t i = 0; i < spher_coords.size(); i++) {
        Eigen::Matrix<double, 3, 1> spher_input   = spher_coords[i];  // cast vector3d to matrix
        Eigen::Matrix<double, 3, 1> spher_compare = spherToCart_results[i];
        Eigen::Matrix<double, 3, 1> cart_result   = Eigen::Matrix<double, 3, 1>(0, 0, 0);
        //
        if (spher_input.x() < 0) {
            //
            REQUIRE_THROWS_AS(utility::math::coordinates::sphericalToCartesian(spher_input), std::domain_error);
        }
        else {
            cart_result = utility::math::coordinates::sphericalToCartesian(spher_input);
            // NOTE: possibly use epsilon
            Eigen::Matrix<double, 3, 1> result_diff = (cart_result - spher_compare);
            // NOTE: changed table heading from outside of for loop (as in the above example) to inside,
            // so it doesn't show up when testing for exception.
            //***Table heading***
            INFO("----------------------------------------------------------------------------");
            INFO(std::left << std::setw(18) << "Input" << std::setw(18) << "Ext calc result" << std::setw(18)
                           << "Util result" << std::setw(18) << "Difference");
            INFO("----------------------------------------------------------------------------");
            // New output - Table format
            INFO(std::left << std::setw(18) << spher_input.x() << std::setw(18) << spher_compare.x() << std::setw(18)
                           << cart_result.x() << std::setw(18) << result_diff.x() << "\n"
                           << std::left << std::setw(18) << spher_input.y() << std::setw(18) << spher_compare.y()
                           << std::setw(18) << cart_result.y() << std::setw(18) << result_diff.y() << "\n"
                           << std::left << std::setw(18) << spher_input.z() << std::setw(18) << spher_compare.z()
                           << std::setw(18) << cart_result.z() << std::setw(18) << result_diff.y());
            INFO("----------------------------------------------------------------------------");
            INFO("Difference should be within the error threshold: " << ERROR_THRESHOLD << ".");
            INFO("Failed test value at index: " << i);
            // old output
            // INFO("Input: \n"
            //      << std::left << spher_input << "\nExternally calculated result: \n"
            //      << std::left << spher_compare << "\nUtilities method result: \n"
            //      << std::left << cart_result
            //      << "\nThe difference between the externally calculated result and utilities method result: \n"
            //      << std::left << result_diff << ". \nThis should be within the error threshold: \n"
            //      << std::left << ERROR_THRESHOLD << ".");
            // Exception should be thrown if radial distance is negative
            // NOTE: .x()?
            // TEST for fail - set <= to >
            REQUIRE(result_diff.x() <= ERROR_THRESHOLD);
            REQUIRE(result_diff.y() <= ERROR_THRESHOLD);
            REQUIRE(result_diff.z() <= ERROR_THRESHOLD);
        }
    }
}
