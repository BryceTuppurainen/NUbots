//Author: Shaan Arora

#include <Eigen/Core>
#include <ostream>
#include <vector>
#include <array>
#include <catch.hpp>
#include <float.h>
#include "utility/math/geometry/Quad.hpp"

using utility::math::geometry::Quad;


//Test suite/bed of points
//These numbers are close to the maximum value a float can be represented
static const std::array<std::vector<Eigen::Vector2f>, 6> points = {
    std::vector<Eigen::Vector2f>{
        {1.616412146187743383e+36, 4.078547546635703034e+36},
        {4.757728326494828274e+36, 6.934685291783180400e+36},
        {8.483536030394567298e+36, 8.486278746960774877e+36},
        {8.662597104272308335e+36, 9.017663347657247804e+36},
        {9.048258056646946353e+36, 9.164079051456992015e+36},
        {9.203404686267593399e+36, 9.217362323193367632e+36}
    },
    //Eigen vector for all numbers to the power of positive 37
    std::vector<Eigen::Vector2f>{
        {9.880131255476834329e+37, 5.490539726398880073e+37},
        {1.036345969203774630e+37, 5.548681119048109601e+37},
        {1.070903861924837718e+37, 5.632025582858259685e+37},
        {1.119442763888715329e+37, 5.667842072002044378e+37},
        {1.130688575877747660e+37, 5.693664349952033714e+37},
        {1.393479162877742200e+37, 5.830856220914150682e+37},
        {1.493124462949478331e+37, 5.897431332630735570e+37},
        {1.501438053477102106e+37, 6.366123014260443353e+37},
        {1.528267463501165635e+37, 6.406700486426898214e+37},
        {1.552180713940484440e+37, 6.420137288853954474e+37},
        {1.556272382289036279e+37, 6.454857426805111003e+37},
        {1.723024750359820209e+37, 6.474142812392257143e+37},
        {1.732867504316978128e+37, 6.476278546023384578e+37},
        {1.806326553882429965e+37, 6.830090193426795414e+37},
        {1.925350302255641734e+37, 6.906994872395009284e+37},
        {1.961801473904414039e+37, 6.967049302414485891e+37},
        {2.093958086453961216e+37, 6.967232642464336132e+37},
        {2.172226010804465424e+37, 7.028894553687061870e+37},
        {2.196146677389013010e+37, 7.123887663651855743e+37},
        {2.343950602283540415e+37, 7.415293188810904221e+37},
        {2.417483497867852272e+37, 7.441233846428231215e+37},
        {2.471802491291863985e+37, 7.546694222019342892e+37},
        {2.472303186392269180e+37, 7.586179235887269977e+37},
        {2.473927905683277388e+37, 7.656212461796303863e+37},
        {2.689785453394082258e+37, 7.681408694782002576e+37},
        {2.708364474736222032e+37, 7.779505282360715975e+37},
        {2.766413557805034583e+37, 7.813388739911208901e+37},
        {2.877971403995209759e+37, 7.821273767074548789e+37},
        {3.127361877184027429e+37, 7.887027158879138050e+37},
        {3.201093560352318647e+37, 7.942486758116237153e+37},
        {3.256427799644875096e+37, 8.298971091157202929e+37},
        {3.284594832648030656e+37, 8.314632227406331345e+37},
        {3.288514517717310048e+37, 8.413199980233361563e+37},
        {3.392455057413602506e+37, 8.435063824518385363e+37},
        {3.474489059743861243e+37, 8.464069691488387650e+37},
        {3.518909789429030613e+37, 8.517972973990099803e+37},
        {3.539968622995115182e+37, 8.587737747925324301e+37},
        {3.551958191087803610e+37, 8.602128878204049021e+37},
        {3.558404271806007786e+37, 8.631387992523285764e+37},
        {3.568789075488485961e+37, 8.686306346590975464e+37},
        {3.631712498513134083e+37, 8.690760817322085793e+37},
        {3.697221374385901604e+37, 8.702331664040473867e+37},
        {3.794177124710878420e+37, 8.743704017954368785e+37},
        {3.838103471119592926e+37, 8.771435486653495878e+37},
        {3.881244172656436103e+37, 8.794179638519779486e+37},
        {3.958671970948142559e+37, 8.820499999414151548e+37},
        {3.990786710611232914e+37, 8.838509547793558525e+37},
        {4.112369569718187862e+37, 9.037877030117064392e+37},
        {4.154167777885751268e+37, 9.068794524999949119e+37},
        {4.161191540424956788e+37, 9.198810724487036174e+37},
        {4.403294660250326101e+37, 9.279218682762971607e+37},
        {4.515202622394519964e+37, 9.373187170250139661e+37},
        {4.659682264711553446e+37, 9.381692886344058961e+37},
        {4.677899351505209170e+37, 9.404971942086411954e+37},
        {4.683413383629249534e+37, 9.463164405710901447e+37},
        {4.706339314762124261e+37, 9.500258316135059489e+37},
        {4.876181481569109018e+37, 9.546938627254202274e+37},
        {4.982169437365105732e+37, 9.547083168509498738e+37},
        {5.000681664076231686e+37, 9.615573661963183538e+37},
        {5.032742058545412388e+37, 9.670481849312651574e+37},
        {5.253862676330990157e+37, 9.698684807550104854e+37},
        {5.392507938214259100e+37, 9.700410574212343008e+37},
        {5.428975284797229669e+37, 9.739580198201357394e+37}
    },
    //Eigen vector for all numbers to the power of positive 38
    std::vector<Eigen::Vector2f>{
        {2.147730172616194266e+38, 1.005866127614966437e+38},
        {2.153232910134102896e+38, 1.010377078863220519e+38},
        {2.155222082154230128e+38, 1.026013776003538843e+38},
        {2.175896872089279200e+38, 1.029061353388580939e+38},
        {2.176169488644414302e+38, 1.037257912059550053e+38},
        {2.177858494707410911e+38, 1.041134494566116216e+38},
        {2.183505646811999172e+38, 1.044232487245230857e+38},
        {2.188355464212478034e+38, 1.046072287516715477e+38},
        {2.190101534851422724e+38, 1.047189293926398034e+38},
        {2.195000957512281458e+38, 1.047374391227067697e+38},
        {2.218801802099386471e+38, 1.047388765927947926e+38},
        {2.220321769707949815e+38, 1.056834273068668209e+38},
        {2.222056692171750610e+38, 1.061622080071315886e+38},
        {2.227582374865872988e+38, 1.068627908666568976e+38},
        {2.233492507088942242e+38, 1.071722564773089928e+38},
        {2.235093673581525845e+38, 1.072118174676971550e+38},
        {2.242719144171801574e+38, 1.079138225553007660e+38},
        {2.243481273263304351e+38, 1.091082498412987648e+38},
        {2.246851236680739514e+38, 1.093770084336526259e+38},
        {2.248863998834965557e+38, 1.099795661616713181e+38},
        {2.254281091135617649e+38, 1.101003842023071943e+38},
        {2.256850728946766240e+38, 1.104954685561948665e+38},
        {2.259920839039632687e+38, 1.110585024698452883e+38},
        {2.275047490484005945e+38, 1.116739143359254545e+38},
        {2.276668225139172087e+38, 1.117077778287318335e+38},
        {2.285888471069666511e+38, 1.123574741266582447e+38},
        {2.296771677975668193e+38, 1.128615044612701059e+38},
        {2.299612646533205000e+38, 1.133353859446261999e+38},
        {2.301112776573184420e+38, 1.137560195515651573e+38},
        {2.306142051009126301e+38, 1.139578537622298358e+38},
        {2.312630778550417176e+38, 1.143200264965735111e+38},
        {2.327135674320635333e+38, 1.146287987860809972e+38},
        {2.335134277586201899e+38, 1.149194206059082899e+38},
        {2.337525067645847621e+38, 1.151650302250279076e+38},
        {2.340124902744737843e+38, 1.156949777163522117e+38},
        {2.345852932272354317e+38, 1.166811634342668616e+38},
        {2.347679222477416735e+38, 1.168511691817283939e+38},
        {2.355732087318995741e+38, 1.172132966758806313e+38},
        {2.365001318597335557e+38, 1.184741690040672038e+38},
        {2.371191359657978019e+38, 1.193526204394005516e+38},
        {2.379186648539038173e+38, 1.201205607868051591e+38},
        {2.383761118762419166e+38, 1.201611823288862866e+38},
        {2.385938034560888301e+38, 1.203740546224610046e+38},
        {2.390520054082435237e+38, 1.207838025152699876e+38},
        {2.412527076146380061e+38, 1.221304537151551535e+38},
        {2.414775681492304980e+38, 1.226590486817173244e+38},
        {2.426560825195756216e+38, 1.230071229845749069e+38},
        {2.431316123050085566e+38, 1.231447903521757839e+38},
        {2.437453814093687797e+38, 1.237091138548443670e+38},
        {2.441504759973424023e+38, 1.241978643813999280e+38},
        {2.442761544137306422e+38, 1.244890900191963728e+38},
        {2.443666212496508207e+38, 1.249424504204121313e+38},
        {2.448831163509422031e+38, 1.257789477989118963e+38},
        {2.456254082342227656e+38, 1.258159482125793080e+38},
        {2.461238893232512944e+38, 1.259860238182430363e+38},
        {2.467653662245246048e+38, 1.260997399116858218e+38},
        {2.469155688079643296e+38, 1.269127945503163542e+38},
        {2.472288842973398187e+38, 1.271327702766346885e+38},
        {2.476274576905582370e+38, 1.284343741867767974e+38},
        {2.488161366941729081e+38, 1.284512625335665017e+38},
        {2.493159044153605432e+38, 1.287033668652829323e+38},
        {2.502738074945650844e+38, 1.303795732271143950e+38},
        {2.513947836096213590e+38, 1.304451991038544356e+38},
        {2.529665208756520872e+38, 1.320353394008452996e+38},
        {2.534798347089323600e+38, 1.321112616934739156e+38},
        {2.535362476066089343e+38, 1.321239463197735231e+38},
        {2.535683103535218928e+38, 1.325239855403327936e+38},
        {2.548473071963764396e+38, 1.325313264600590026e+38},
        {2.554400740128515999e+38, 1.335785561275473549e+38},
        {2.558151718966344895e+38, 1.337895317394633490e+38},
        {2.561121901310114012e+38, 1.341264765357962865e+38},
        {2.566012082821935210e+38, 1.344283388719631231e+38},
        {2.566392087774087708e+38, 1.344896926506101085e+38},
        {2.570179319551988251e+38, 1.345580216194502969e+38},
        {2.572763733954233011e+38, 1.351835190191405875e+38},
        {2.572944491386446510e+38, 1.363255400547528796e+38},
        {2.579719757911149766e+38, 1.367124502047018787e+38},
        {2.586156562561336105e+38, 1.369731331955127146e+38},
        {2.589940524026458355e+38, 1.386391608693850517e+38},
        {2.600015759608108740e+38, 1.391243409483532273e+38},
        {2.600524435446153376e+38, 1.391432912729968010e+38},
        {2.608545956541979516e+38, 1.395981390176816746e+38},
        {2.610448801886149707e+38, 1.397553374134248810e+38},
        {2.620875772555049671e+38, 1.402586585582741158e+38},
        {2.622982710207342959e+38, 1.409415858120395061e+38},
        {2.631524836796718678e+38, 1.411619495126413830e+38},
        {2.650063319159594579e+38, 1.413246096325777040e+38},
        {2.654243428770910225e+38, 1.416143596882902128e+38},
        {2.672203655130888816e+38, 1.422703273953200211e+38},
        {2.681111463584051171e+38, 1.440925793578273647e+38},
        {2.691957427078736470e+38, 1.447383144957749908e+38},
        {2.696223775781656554e+38, 1.451423711080933972e+38},
        {2.697000496872067975e+38, 1.467167559370398177e+38},
        {2.700481288293831967e+38, 1.496784199854193854e+38},
        {2.701977297729747763e+38, 1.516572772932107433e+38},
        {2.710076201493008303e+38, 1.523208353773937909e+38},
        {2.714654742845097262e+38, 1.525863750690169849e+38},
        {2.722908558753459575e+38, 1.548834470201144973e+38},
        {2.724966156559253488e+38, 1.582380368197379760e+38},
        {2.734174952012349506e+38, 1.590713633140161883e+38},
        {2.757195456086320974e+38, 1.593557226423823366e+38},
        {2.757744009066154216e+38, 1.596517774711908708e+38},
        {2.771389534678613985e+38, 1.597904827961365924e+38},
        {2.772097221653578036e+38, 1.600258696937535667e+38},
        {2.775840615623829601e+38, 1.605332514439152315e+38},
        {2.780614744368952543e+38, 1.609421472639168892e+38},
        {2.801411348468677670e+38, 1.613866249208029054e+38},
        {2.805031447023185359e+38, 1.615260997350457798e+38},
        {2.805616560442641150e+38, 1.622904219430692661e+38},
        {2.823845395980010632e+38, 1.629865824476876043e+38},
        {2.826888970666200894e+38, 1.638544665418048179e+38},
        {2.835775303892512340e+38, 1.641765252633456653e+38},
        {2.842562259351262866e+38, 1.648216652865067297e+38},
        {2.845524790753866344e+38, 1.651071886810430975e+38},
        {2.852399056280489208e+38, 1.672985190942161284e+38},
        {2.872504877001802004e+38, 1.677945425034038953e+38},
        {2.883536070134884281e+38, 1.679996632466351095e+38},
        {2.887776514414092576e+38, 1.712921802022901531e+38},
        {2.893512981426582014e+38, 1.739018637104655920e+38},
        {2.899218123475270211e+38, 1.742117349599272302e+38},
        {2.901042122132725405e+38, 1.755513437106834639e+38},
        {2.915744095611168438e+38, 1.759217534017030089e+38},
        {2.924583069545186433e+38, 1.759835281582071838e+38},
        {2.935970901338485768e+38, 1.761407367982921294e+38},
        {2.948707013837225208e+38, 1.763302251069742485e+38},
        {2.950482561764533115e+38, 1.764208808914234763e+38},
        {2.953325768376094603e+38, 1.769255534055055969e+38},
        {2.970100925091569653e+38, 1.770295751937485367e+38},
        {2.985356397972647711e+38, 1.780662618749389936e+38},
        {2.987538133336143062e+38, 1.784350903156490984e+38},
        {2.991848687189303422e+38, 1.796042766438651454e+38},
        {2.993943513567852313e+38, 1.802529925055465627e+38},
        {3.003982294075402340e+38, 1.817439737363859376e+38},
        {3.023101824753271918e+38, 1.817460845855818039e+38},
        {3.024435494920014331e+38, 1.824159791058934602e+38},
        {3.034731505058959683e+38, 1.837228849319926443e+38},
        {3.044430613220488982e+38, 1.838071275355120952e+38},
        {3.056691589018755716e+38, 1.846492697696815093e+38},
        {3.059497116935679865e+38, 1.853298760042918681e+38},
        {3.062800388412300499e+38, 1.861241523221706616e+38},
        {3.088913698083551358e+38, 1.868849096884994346e+38},
        {3.101999005111758942e+38, 1.874691721942170709e+38},
        {3.104744290196781772e+38, 1.883855180041667717e+38},
        {3.116032507945696281e+38, 1.894228634307867857e+38},
        {3.121252271780632884e+38, 1.895349413290504273e+38},
        {3.121823059865037691e+38, 1.895694243221746876e+38},
        {3.139128904054355533e+38, 1.898591981658325051e+38},
        {3.156928008145419327e+38, 1.902456535733832438e+38},
        {3.166276967220127145e+38, 1.914972169939318320e+38},
        {3.172239437746662711e+38, 1.923755336035112558e+38},
        {3.172558869341964621e+38, 1.927344992543132322e+38},
        {3.172702196187763775e+38, 1.930028201683847150e+38},
        {3.183424597334440316e+38, 1.933270076274063569e+38},
        {3.185529633916690060e+38, 1.933879177492779286e+38},
        {3.190575789944154952e+38, 1.935157585949219198e+38},
        {3.191400890526120505e+38, 1.939140619563295881e+38},
        {3.194305061572737831e+38, 1.944044523041852938e+38},
        {3.197686152800879099e+38, 1.956838353056543742e+38},
        {3.200066469950198728e+38, 1.977556854539137616e+38},
        {3.212925100433474470e+38, 1.999063985223414067e+38},
        {3.225344816771711195e+38, 2.009296421641472370e+38},
        {3.234537366081149770e+38, 2.016084097806400924e+38},
        {3.256485690565014238e+38, 2.023773769490530531e+38},
        {3.268018842170211568e+38, 2.029600074431920123e+38},
        {3.271133087793235021e+38, 2.037663070954787583e+38},
        {3.279759201768077202e+38, 2.038141425695101261e+38},
        {3.286916859703960215e+38, 2.040832309855514666e+38},
        {3.299966036534857856e+38, 2.048514934761663241e+38},
        {3.301067576826046786e+38, 2.051091194113905387e+38},
        {3.311764172914408969e+38, 2.055094359513060320e+38},
        {3.355014215308478228e+38, 2.055680599882725325e+38},
        {3.365887066800781172e+38, 2.063786473155227574e+38},
        {3.371231573377451760e+38, 2.066263165208559115e+38},
        {3.371623976292466366e+38, 2.069490714088687804e+38},
        {3.372946446856916623e+38, 2.076313959363236358e+38},
        {3.378337840185213600e+38, 2.079273835045719843e+38},
        {3.384857319861137203e+38, 2.098547305950370108e+38},
        {3.385297162830614502e+38, 2.117815240131373055e+38},
        {3.386644773378186771e+38, 2.124862274285025472e+38},
        {3.391210811585081850e+38, 2.141488509367022799e+38}
    },
    //Eigen vector for a mix of powers due to there being odd number of numbers generated
    //the number to the power of 37 was the last number generated for that power
    // and the numebr to the power of 38 is the first number that was generated for that power
    std::vector<Eigen::Vector2f>{
        {9.802592067551322668e+37, 1.001021344972634238e+38}
    }
};

//unit test for getBoundingBox()
//expect that this function has zero or positive inputs
TEST_CASE("Test the Bounding Box Function", "[utility][math][geometry][quad]") {
    INFO("Start of test case here");
    INFO("The size of the std::array points is " << points.size());
    for(const auto&  pts : points)
    {
        INFO("The size of the std::vectors are " << pts.size());
        auto result = Quad::getBoundingBox(pts);
        INFO("The Quad object generated using this std::vec is " << result);
        for(const auto& v : pts)
        {
            INFO("The Eigen values are " << v);
            REQUIRE(1==2);
        }
        //REQUIRE(1==2);
    }
    INFO("End of test case here");
    REQUIRE(5 == 6);
}
